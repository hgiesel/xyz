{"version":3,"sources":["logo.svg","clock.jsx","tictactoe.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","Square","className","value","Board","grid","Array","from","colums","map","_","rows","renderGrid","row","cell","renderSquare","i","GameHistory","Game","columns","HelloMessage","name","ShoppingList","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,uNCE9BC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,KAAM,IAAIC,MAFR,EADrB,gEAMuB,IAAD,OAClBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,OATN,6CAcIC,cAAcJ,KAAKC,WAdvB,6BAkBID,KAAKK,SAAS,CAAEP,KAAM,IAAIC,SAlB9B,+BAsBI,OACE,6BACE,6CACA,qCAAWC,KAAKH,MAAMC,KAAKQ,qBAA3B,UAzBR,GAA2BC,IAAMC,WCE3BC,G,6KAEF,OACE,4BAAQC,UAAU,UACfV,KAAKJ,MAAMe,W,GAJCJ,IAAMC,YAUrBI,E,kDACJ,WAAYhB,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAMiB,EAAOC,MAAMC,KAAKD,MAAM,EAAKlB,MAAMoB,SACtCC,KAAI,SAAAC,GAAC,OAAIJ,MAAM,EAAKlB,MAAMuB,SAJZ,OAMjB,EAAKtB,MAAQ,CAAEgB,QANE,E,qDASjB,OAAOb,KAAKoB,WAAWpB,KAAKH,MAAMgB,Q,iCAGzBA,GAAO,IAAD,OACf,OAAOA,EAAKI,KAAI,SAAAI,GAAG,OACjB,yBAAKX,UAAU,aACZW,EAAIJ,KAAI,SAAAK,GAAI,OAAI,EAAKC,aAAaD,Y,mCAK5BE,GACX,OAAO,kBAAC,EAAD,CAAQb,MAAOa,Q,GAtBNjB,IAAMC,WA0BpBiB,E,uKAEF,OAAO,S,GAFelB,IAAMC,WAMnBkB,EAAb,uKAEI,OACE,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAaS,KAAM,EAAGQ,QAAS,UARzC,GAA0BpB,IAAMC,WCvC1BoB,G,6KAEF,OACE,sCACS5B,KAAKJ,MAAMiC,U,GAJCtB,IAAMC,YAU3BsB,E,uKAEF,OACE,yBAAKpB,UAAU,iBACb,iDAAuBV,KAAKJ,MAAMiC,MAClC,4BACE,yCACA,wCACA,4C,GARiBtB,IAAMC,WA0ClBuB,MA3Bf,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKsB,IAAKC,IAAMvB,UAAU,WAAWwB,IAAI,SACzC,mCACO,6CADP,wBAGA,uBACExB,UAAU,WACVyB,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,iCACE,kBAAC,EAAD,CAAcR,KAAK,WACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCzCYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aaf0b7f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport class Clock extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { date: new Date() }\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000,\n    )\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  tick() {\n    this.setState({ date: new Date() })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport './tictactoe.css'\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <button className=\"square\">\n        {this.props.value}\n      </button>\n    )\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const grid = Array.from(Array(this.props.colums))\n      .map(_ => Array(this.props.rows))\n\n    this.state = { grid }\n  }\n  render() {\n    return this.renderGrid(this.state.grid)\n  }\n\n  renderGrid(grid) {\n    return grid.map(row => (\n      <div className=\"board-row\">\n        {row.map(cell => this.renderSquare(cell))}\n      </div>\n    ))\n  }\n\n  renderSquare(i) {\n    return <Square value={i} />\n  }\n}\n\nclass GameHistory extends React.Component {\n  render() {\n    return null\n  }\n}\n\nexport class Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <GameHistory rows={3} columns={3} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport logo from './logo.svg'\nimport { Clock } from './clock'\nimport { Game } from './tictactoe'\nimport './App.css'\n\nclass HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    )\n  }\n}\n\nclass ShoppingList extends React.Component {\n  render() {\n    return (\n      <div className=\"shopping-list\">\n        <h1>Shopping List for {this.props.name}</h1>\n        <ul>\n          <li>Instagram</li>\n          <li>WhatsApp</li>\n          <li>Oculus</li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.jsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <section>\n        <HelloMessage name=\"Henrik\" />\n        <ShoppingList />\n        <Game />\n        <Clock />\n      </section>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}